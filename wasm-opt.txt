  --version                                     Output version information and exit
  --help,-h                                     Show this help message and exit
  --debug,-d                                    Print debug information to stderr
  --mvp-features,-mvp                           Disable all non-MVP features
  --all-features,-all                           Enable all features
  --detect-features                             Use features from the target features section, or MVP (default)
  --quiet,-q                                    Emit less verbose output and hide trivial warnings.
  --experimental-poppy                          Parse wast files as Poppy IR fortesting purposes.
  --enable-sign-ext                             Enable sign extension operations
  --disable-sign-ext                            Disable sign extension operations
  --enable-threads                              Enable atomic operations
  --disable-threads                             Disable atomic operations
  --enable-mutable-globals                      Enable mutable globals
  --disable-mutable-globals                     Disable mutable globals
  --enable-nontrapping-float-to-int             Enable nontrapping float-to-intoperations
  --disable-nontrapping-float-to-int            Disable nontrapping float-to-intoperations
  --enable-simd                                 Enable SIMD operations and types
  --disable-simd                                Disable SIMD operations and types
  --enable-bulk-memory                          Enable bulk memory operations
  --disable-bulk-memory                         Disable bulk memory operations
  --enable-exception-handling                   Enable exception handling operations
  --disable-exception-handling                  Disable exception handling operations
  --enable-tail-call                            Enable tail call operations
  --disable-tail-call                           Disable tail call operations
  --enable-reference-types                      Enable reference types
  --disable-reference-types                     Disable reference types
  --enable-multivalue                           Enable multivalue functions
  --disable-multivalue                          Disable multivalue functions
  --enable-gc                                   Enable garbage collection
  --disable-gc                                  Disable garbage collection
  --no-validation,-n                            Disables validation, assumes inputs are correct
  --pass-arg,-pa                                An argument passed along to optimization passes being run. Must be in the form KEY@VALUE
  -O                                            execute default optimization passes
  -O0                                           execute no optimization passes
  -O1                                           execute -O1 optimization passes(quick&useful opts, useful for iteration builds)
  -O2                                           execute -O2 optimization passes(most opts, generally gets mostperf)
  -O3                                           execute -O3 optimization passes(spends potentially a lot of time optimizing)
  -O4                                           execute -O4 optimization passes(also flatten the IR, which cantake a lot more time and memory,but is useful on more nested / complex / less-optimized input)
  -Os                                           execute default optimization passes, focusing on code size
  -Oz                                           execute default optimization passes, super-focusing on code size
  --optimize-level,-ol                          How much to focus on optimizingcode
  --shrink-level,-s                             How much to focus on shrinking code size
  --debuginfo,-g                                Emit names section in wasm binary (or full debuginfo in wast)
  --always-inline-max-function-size,-aimfs      Max size of functions that are always inlined (default 2, whichis safe for use with -Os builds)
  --flexible-inline-max-function-size,-fimfs    Max size of functions that are inlined when lightweight (no loops or function calls) when optimizing aggressively for speed (-O3). Default: 20
  --one-caller-inline-max-function-size,-ocimfs Max size of functions that are inlined when there is only one caller (default 15). Reason thisis not unbounded is that some implementations may have a hardtime optimizing really large functions
  --inline-functions-with-loops,-ifwl           Allow inlining functions with loops
  --ignore-implicit-traps,-iit                  Optimize under the helpful assumption that no surprising traps occur (from load, div/mod,etc.)
  --low-memory-unused,-lmu                      Optimize under the helpful assumption that the low 1K of memory is not used by the application
  --alignment-lowering                          lower unaligned loads and storesto smaller aligned ones
  --asyncify                                    async/await style transform, allowing pausing and resuming
  --avoid-reinterprets                          Tries to avoid reinterpret operations via more loads
  --coalesce-locals                             reduce # of locals by coalescing
  --coalesce-locals-learning                    reduce # of locals by coalescingand learning
  --code-folding                                fold code, merging duplicates
  --code-pushing                                push code forward, potentially making it not always execute
  --const-hoisting                              hoist repeated constants to a local
  --dae                                         removes arguments to calls in anlto-like manner
  --dae-optimizing                              removes arguments to calls in anlto-like manner, and optimizes where we removed
  --dce                                         removes unreachable code
  --dealign                                     forces all loads and stores to have alignment 1
  --denan                                       instrument the wasm to convert NaNs into 0 at runtime
  --dfo                                         optimizes using the DataFlow SSAIR
  --directize                                   turns indirect calls into directones
  --duplicate-function-elimination              removes duplicate functions
  --duplicate-import-elimination                removes duplicate imports
  --dwarfdump                                   dump DWARF debug info sections from the read binary
  --emit-target-features                        emit the target features sectionin the output
  --emscripten-pic                              Convert PIC ABI from llvm to emscripten
  --emscripten-pic-main-module                  Convert PIC ABI from llvm to emscripten
  --extract-function                            leaves just one function (usefulfor debugging)
  --flatten                                     flattens out code, removing nesting
  --fpcast-emu                                  emulates function pointer casts,allowing incorrect indirect calls to (sometimes) work
  --func-metrics                                reports function metrics
  --generate-dyncalls                           generate dynCall fuctions used by emscripten ABI
  --generate-i64-dyncalls                       generate dynCall functions usedby emscripten ABI, but only forfunctions with i64 in their signature (which cannot be invoked via the wasm table without JavaScript BigInt support).
  --generate-stack-ir                           generate Stack IR
  --i64-to-i32-lowering                         lower all uses of i64s to use i32s instead
  --inline-main                                 inline __original_main into main
  --inlining                                    inline functions (you probably want inlining-optimizing)
  --inlining-optimizing                         inline functions and optimizes where we inlined
  --instrument-locals                           instrument the build with code to intercept all loads and stores
  --instrument-memory                           instrument the build with code to intercept all loads and stores
  --legalize-js-interface                       legalizes i64 types on the import/export boundary
  --legalize-js-interface-minimally             legalizes i64 types on the import/export boundary in a minimal manner, only on things only JS will call
  --licm                                        loop invariant code motion
  --limit-segments                              attempt to merge segments to fitwithin web limits
  --local-cse                                   common subexpression eliminationinside basic blocks
  --log-execution                               instrument the build with logging of where execution goes
  --memory-packing                              packs memory into separate segments, skipping zeros
  --merge-blocks                                merges blocks to their parents
  --merge-locals                                merges locals when beneficial
  --metrics                                     reports metrics
  --minify-imports                              minifies import names (only those, and not export names), and emits a mapping to the minified ones
  --minify-imports-and-exports                  minifies both import and exportnames, and emits a mapping to the minified ones
  --minify-imports-and-exports-and-modules      minifies both import and exportnames, and emits a mapping to the minified ones, and minifiesthe modules as well
  --mod-asyncify-always-and-only-unwind         apply the assumption that asyncify imports always unwind,and we never rewind
  --mod-asyncify-never-unwind                   apply the assumption that asyncify never unwinds
  --nm                                          name list
  --no-exit-runtime                             removes calls to atexit(), whichis valid if the C runtime will never be exited
  --optimize-added-constants                    optimizes added constants into load/store offsets
  --optimize-added-constants-propagate          optimizes added constants into load/store offsets, propagatingthem across locals too
  --optimize-instructions                       optimizes instruction combinations
  --optimize-stack-ir                           optimize Stack IR
  --pick-load-signs                             pick load signs based on their uses
  --post-assemblyscript                         eliminates redundant ARC patterns in AssemblyScript output
  --post-assemblyscript-finalize                eliminates collapsed ARC patterns after other optimizations
  --post-emscripten                             miscellaneous optimizations forEmscripten-generated code
  --precompute                                  computes compile-time evaluatable expressions
  --precompute-propagate                        computes compile-time evaluatable expressions and propagates them through locals
  --print                                       print in s-expression format
  --print-call-graph                            print call graph
  --print-features                              print options for enabled features
  --print-full                                  print in full s-expression format
  --print-function-map                          print a map of function indexesto names
  --print-minified                              print in minified s-expression format
  --print-stack-ir                              print out Stack IR (useful for internal debugging)
  --relooper-jump-threading                     thread relooper jumps (fastcompoutput only)
  --remove-imports                              removes imports and replaces them with nops
  --remove-memory                               removes memory segments
  --remove-non-js-ops                           removes operations incompatiblewith js
  --remove-unused-brs                           removes breaks from locations that are not needed
  --remove-unused-module-elements               removes unused module elements
  --remove-unused-names                         removes names from locations that are never branched to
  --remove-unused-nonfunction-module-elements   removes unused module elements that are not functions
  --reorder-functions                           sorts functions by access frequency
  --reorder-locals                              sorts locals by access frequency
  --replace-stack-pointer                       Replace llvm-generated stack pointer global with calls with imported functions.
  --rereloop                                    re-optimize control flow using the relooper algorithm
  --roundtrip                                   write the module to binary, thenread it
  --rse                                         remove redundant local.sets
  --safe-heap                                   instrument loads and stores to check for invalid behavior
  --simplify-globals                            miscellaneous globals-related optimizations
  --simplify-globals-optimizing                 miscellaneous globals-related optimizations, and optimizes where we replaced global.gets with constants
  --simplify-locals                             miscellaneous locals-related optimizations
  --simplify-locals-nonesting                   miscellaneous locals-related optimizations (no nesting at all; preserves flatness)
  --simplify-locals-nostructure                 miscellaneous locals-related optimizations (no structure)
  --simplify-locals-notee                       miscellaneous locals-related optimizations (no tees)
  --simplify-locals-notee-nostructure           miscellaneous locals-related optimizations (no tees or structure)
  --souperify                                   emit Souper IR in text form
  --souperify-single-use                        emit Souper IR in text form (single-use nodes only)
  --spill-pointers                              spill pointers to the C stack (useful for Boehm-style GC)
  --ssa                                         ssa-ify variables so that they have a single assignment
  --ssa-nomerge                                 ssa-ify variables so that they have a single assignment, ignoring merges
  --stack-check                                 enforce limits on llvm's __stack_pointer global
  --strip                                       deprecated; same as strip-debug
  --strip-debug                                 strip debug info (including thenames section)
  --strip-dwarf                                 strip dwarf debug info
  --strip-producers                             strip the wasm producers section
  --strip-target-features                       strip the wasm target features section
  --stub-unsupported-js                         stub out unsupported JS operations
  --trap-mode-clamp                             replace trapping operations withclamping semantics
  --trap-mode-js                                replace trapping operations withjs semantics
  --untee                                       removes local.tees, replacing them with sets and gets
  --vacuum                                      removes obviously unneeded code
  --output,-o                                   Output file (stdout if not specified)
  --emit-text,-S                                Emit text instead of binary forthe output file
  --converge,-c                                 Run passes to convergence, continuing while binary size decreases
  --fuzz-exec-before,-feh                       Execute functions before optimization, helping fuzzing find bugs
  --fuzz-exec,-fe                               Execute functions before and after optimization, helping fuzzing find bugs
  --extra-fuzz-command,-efc                     An extra command to run on the output before and after optimizing. The output is compared between the two, and anerror occurs if they are not equal
  --translate-to-fuzz,-ttf                      Translate the input into a validwasm module *somehow*, useful for fuzzing
  --fuzz-passes,-fp                             Pick a random set of passes to run, useful for fuzzing. this depends on translate-to-fuzz (itpicks the passes from the input)
  --no-fuzz-memory                              don't emit memory ops when fuzzing
  --no-fuzz-oob                                 don't emit out-of-bounds loads/stores/indirect calls whenfuzzing
  --emit-js-wrapper,-ejw                        Emit a JavaScript wrapper file that can run the wasm with sometest values, useful for fuzzing
  --emit-spec-wrapper,-esw                      Emit a wasm spec interpreter wrapper file that can run the wasm with some test values, useful for fuzzing
  --emit-wasm2c-wrapper,-esw                    Emit a C wrapper file that can run the wasm after it is compiled with wasm2c, useful forfuzzing
  --input-source-map,-ism                       Consume source map from the specified file
  --output-source-map,-osm                      Emit source map to the specifiedfile
  --output-source-map-url,-osu                  Emit specified string as sourcemap URL